{"version":3,"sources":["logo.svg","InteractiveChart.js","form-components.js","Form.js","validators.js","PetInfo.js","Data.js","MedHistory.js","Diet.js","Home.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","InteractiveChart","props","_useState","useState","_useState2","Object","slicedToArray","data","setData","generateList","macronutrient","quantity","concat","map","item","index","join","strContentParse","text","item_list","quant_list","txt_list","split","quant_pattern","RegExp","i","length","listing","push","parseInt","useEffect","keys","form_data","_strContentParse","carbohydrates","_strContentParse2","carbTypes","carb_quant","carbsum","reduce","a","b","_strContentParse3","fats","_strContentParse4","fatTypes","fat_quant","fatsum","_strContentParse5","proteins","_strContentParse6","protTypes","prot_quant","protsum","role","type","html","isLastStep","react_default","createElement","Fragment","dist","chartType","options","title","is3D","tooltip","isHtml","trigger","width","height","FormRadioGroup","fieldRenderProps","validationMessage","touched","id","label","valid","disabled","hint","others","visited","modified","objectWithoutProperties","editorRef","React","showValidationMessage","showHint","hintId","errorId","labelId","react","FieldWrapper","Label","editorId","editorValid","editorDisabled","RadioGroup","assign","ariaDescribedBy","ariaLabelledBy","ref","Hint","Error","FormNumericTextBox","NumericTextBox","FormTextArea","optional","TextArea","stepPages","getter","Field","key","name","component","className","Input","validator","value","wrapperStyle","style","AutoComplete","layout","MultiStepForm","_React$useState","_React$useState2","step","setStep","_React$useState3","_React$useState4","formState","setFormState","_React$useState5","isValid","undefined","_React$useState6","steps","setSteps","lastStepIndex","isPreviousStepsValid","slice","findIndex","currentStep","onStepSubmit","event","values","currentSteps","objectSpread","Math","min","onPrevClick","preventDefault","max","display","flexDirection","justifyContent","Stepper","items","Form","initialValues","onSubmitClick","render","formRenderProps","alignSelf","FormElement","marginTop","alignContent","Button","marginRight","onClick","themeColor","onSubmit","src_InteractiveChart","diet","protein","types","carbs","fat","Home","src_Form","App","react_router_dist","path","element","src_Home","reportWebVitals","onPerfEntry","Function","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","react_router_dom_dist","src_App"],"mappings":"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","file":"static/js/main.fd1668a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { useState, useEffect, useRef } from \"react\";\n\n\nconst InteractiveChart = (props) => {\n  let [data, setData] = useState([]);\n\n\n  const generateList = (macronutrient, quantity) => {\n    return `\n          <ul>\n            ${macronutrient.map((item, index) => {\n      return `\n                <li>\n                  ${item}: ${quantity[index]} \n                </li>\n              `;\n    }).join('')}\n          </ul>\n        `;\n  };\n\n  const strContentParse = (text) => {\n\n    let item_list = []\n    let quant_list = []\n    let txt_list = text.split(\"\\n\");\n    let quant_pattern = new RegExp(\"\\s*,\\s*\")\n    for (let i = 0; i < txt_list.length; i++) {\n      let listing = txt_list[i].split(quant_pattern)\n      item_list.push(listing[0])\n      quant_list.push(parseInt(listing[1]))\n    }\n    return [item_list, quant_list];\n  }\n\n\n  useEffect(() => {\n\n    if (Object.keys(props.form_data).length !== 0) {\n      // console.log(JSON.stringify(props.form_data));\n      // console.log(props.form_data.carbohydrates);\n      // console.log(props.form_data.proteins);\n      // console.log(props.form_data.fats);\n      // console.log(strContentParse(props.form_data.carbohydrates));\n      // console.log(strContentParse(props.form_data.proteins));\n      // console.log(strContentParse(props.form_data.fats));\n      const [carbTypes, carb_quant] = strContentParse(props.form_data.carbohydrates);\n      const carbsum = carb_quant.reduce((a, b) => a + b);\n\n      const [fatTypes, fat_quant] = strContentParse(props.form_data.fats);\n      const fatsum = fat_quant.reduce((a, b) => a + b);\n\n      const [protTypes, prot_quant] = strContentParse(props.form_data.proteins);\n      const protsum = prot_quant.reduce((a, b) => a + b);\n    \n        setData( [ [\"Macro Nutrient\", \"Total\", { role: \"tooltip\", type: \"string\", p: { html: true } }],\n\n            [\"Protein\", protsum, ` ${generateList(protTypes, prot_quant) }`],\n\n            [\"Carbohydrates\", carbsum, `${generateList(carbTypes, carb_quant) }`],\n\n            [\"Fat\", fatsum, `${generateList(fatTypes, fat_quant) }`],\n\n        ]);\n      }\n\n    }, [props.form_data, props.isLastStep]);\n\n\n  const options = {\n    title: \"Dietary Breakdown\",\n    is3D: true,\n    tooltip: {\n      isHtml: true,\n      trigger: \"selection\"\n    }\n  };\n\n  return <>\n\n    {\n      data && data.length > 0 && (\n        <Chart\n          chartType=\"PieChart\"\n          data={data}\n          options={options}\n          width={\"100%\"}\n          height={\"400px\"}\n        />\n      )\n    }\n  </>\n}\n\nexport default InteractiveChart;\n","import * as React from 'react';\nimport { FieldWrapper } from '@progress/kendo-react-form';\nimport { Input, MaskedTextBox, NumericTextBox, Checkbox, ColorPicker, Switch, RadioGroup, Slider, SliderLabel, RangeSlider, TextArea, Rating } from '@progress/kendo-react-inputs';\nimport { DatePicker, TimePicker, DateTimePicker, DateRangePicker, DateInput } from '@progress/kendo-react-dateinputs';\nimport { Label, Error, Hint, FloatingLabel } from '@progress/kendo-react-labels';\nimport { Upload } from '@progress/kendo-react-upload';\nimport { DropDownList, AutoComplete, MultiSelect, ComboBox, MultiColumnComboBox, DropDownTree } from '@progress/kendo-react-dropdowns';\nimport { processTreeData, expandedState } from './tree-data-operations';\nexport const FormInput = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    type,\n    optional,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  return <FieldWrapper>\n        <Label editorId={id} editorValid={valid} editorDisabled={disabled} optional={optional}>{label}</Label>\n        <div className={'k-form-field-wrap'}>\n          <Input valid={valid} type={type} id={id} disabled={disabled} ariaDescribedBy={`${hintId} ${errorId}`} {...others} />\n          {showHint && <Hint id={hintId}>{hint}</Hint>}\n          {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n        </div>\n      </FieldWrapper>;\n};\nexport const FormRadioGroup = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    id,\n    label,\n    valid,\n    disabled,\n    hint,\n    visited,\n    modified,\n    ...others\n  } = fieldRenderProps;\n  const editorRef = React.useRef(null);\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  return <FieldWrapper>\n        <Label id={labelId} editorRef={editorRef} editorId={id} editorValid={valid} editorDisabled={disabled}>{label}</Label>\n        <RadioGroup ariaDescribedBy={`${hintId} ${errorId}`} ariaLabelledBy={labelId} valid={valid} disabled={disabled} ref={editorRef} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormNumericTextBox = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  return <FieldWrapper>\n        <Label editorId={id} editorValid={valid} editorDisabled={disabled}>{label}</Label>\n        <NumericTextBox ariaDescribedBy={`${hintId} ${errorId}`} valid={valid} id={id} disabled={disabled} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormCheckbox = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    id,\n    valid,\n    disabled,\n    hint,\n    optional,\n    label,\n    visited,\n    modified,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  return <FieldWrapper>\n        <Checkbox ariaDescribedBy={`${hintId} ${errorId}`} label={label} labelOptional={optional} valid={valid} id={id} disabled={disabled} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormSwitch = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    optional,\n    id,\n    valid,\n    disabled,\n    hint,\n    ...others\n  } = fieldRenderProps;\n  const editorRef = React.useRef(null);\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  return <FieldWrapper>\n        <Label id={labelId} editorRef={editorRef} editorId={id} editorValid={valid} editorDisabled={disabled} optional={optional}>\n          {label}\n        </Label>\n        <Switch ref={editorRef} ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} valid={valid} id={id} disabled={disabled} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormMaskedTextBox = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    hint,\n    optional,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  return <FieldWrapper>\n        <Label editorId={id} editorValid={valid} optional={optional}>{label}</Label>\n        <div className={'k-form-field-wrap'}>\n          <MaskedTextBox ariaDescribedBy={`${hintId} ${errorId}`} valid={valid} id={id} {...others} />\n          {showHint && <Hint id={hintId}>{hint}</Hint>}\n          {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n        </div>\n      </FieldWrapper>;\n};\nexport const FormTextArea = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    hint,\n    disabled,\n    optional,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  return <FieldWrapper>\n        <Label editorId={id} editorValid={valid} optional={optional}>{label}</Label>\n        <TextArea valid={valid} id={id} disabled={disabled} ariaDescribedBy={`${hintId} ${errorId}`} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormColorPicker = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    wrapperStyle,\n    ...others\n  } = fieldRenderProps;\n  const editorRef = React.useRef(null);\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  return <FieldWrapper style={wrapperStyle}>\n        <Label id={labelId} editorRef={editorRef} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <ColorPicker ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} ref={editorRef} valid={valid} id={id} disabled={disabled} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormSlider = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    data,\n    min,\n    max,\n    ...others\n  } = fieldRenderProps;\n  const editorRef = React.useRef(null);\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  return <FieldWrapper>\n        <Label id={labelId} editorRef={editorRef} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <Slider ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} ref={editorRef} valid={valid} id={id} disabled={disabled} min={min} max={max} {...others}>\n          {data.map(value => <SliderLabel title={value} key={value} position={value}>\n                        {value.toString()}\n                      </SliderLabel>)}\n        </Slider>\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormRangeSlider = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    hint,\n    disabled,\n    data,\n    min,\n    max,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  return <FieldWrapper>\n        <Label editorId={id} editorValid={valid}>{label}</Label>\n        <RangeSlider valid={valid} id={id} disabled={disabled} ariaDescribedBy={`${hintId} ${errorId}`} min={min} max={max} {...others}>{data.map(value => {\n        return <SliderLabel key={value} position={value}>\n                        {value.toString()}\n                      </SliderLabel>;\n      })}\n        </RangeSlider>\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormRating = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    hint,\n    disabled,\n    optional,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  return <FieldWrapper>\n        <Label editorId={id} editorValid={valid} optional={optional}>{label}</Label>\n        <Rating valid={valid} id={id} disabled={disabled} ariaDescribedBy={`${hintId} ${errorId}`} {...others} />\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormUpload = fieldRenderProps => {\n  const {\n    value,\n    id,\n    optional,\n    label,\n    hint,\n    validationMessage,\n    touched,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  const onChangeHandler = event => {\n    fieldRenderProps.onChange({\n      value: event.newState\n    });\n  };\n  const onRemoveHandler = event => {\n    fieldRenderProps.onChange({\n      value: event.newState\n    });\n  };\n  return <FieldWrapper>\n        <Label id={labelId} editorId={id} optional={optional}>\n          {label}\n        </Label>\n        <Upload id={id} autoUpload={false} showActionButtons={false} multiple={false} files={value} onAdd={onChangeHandler} onRemove={onRemoveHandler} ariaDescribedBy={`${hintId} ${errorId}`} ariaLabelledBy={labelId} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormDropDownList = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    wrapperStyle,\n    ...others\n  } = fieldRenderProps;\n  const editorRef = React.useRef(null);\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  return <FieldWrapper style={wrapperStyle}>\n        <Label id={labelId} editorRef={editorRef} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <DropDownList ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} ref={editorRef} valid={valid} id={id} disabled={disabled} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormAutoComplete = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    wrapperStyle,\n    ...others\n  } = fieldRenderProps;\n  const editorRef = React.useRef(null);\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  return <FieldWrapper style={wrapperStyle}>\n        <Label id={labelId} editorRef={editorRef} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <AutoComplete ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} ref={editorRef} valid={valid} id={id} disabled={disabled} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormComboBox = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    wrapperStyle,\n    ...others\n  } = fieldRenderProps;\n  const editorRef = React.useRef(null);\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  return <FieldWrapper style={wrapperStyle}>\n        <Label id={labelId} editorRef={editorRef} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <ComboBox ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} ref={editorRef} valid={valid} id={id} disabled={disabled} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormMultiColumnComboBox = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    wrapperStyle,\n    ...others\n  } = fieldRenderProps;\n  const editorRef = React.useRef(null);\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  const columns = [{\n    field: 'id',\n    header: <span>header</span>,\n    width: '100px'\n  }, {\n    field: 'name',\n    header: 'Name',\n    width: '300px'\n  }, {\n    field: 'position',\n    header: 'Position',\n    width: '300px'\n  }];\n  return <FieldWrapper style={wrapperStyle}>\n        <Label id={labelId} editorRef={editorRef} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <MultiColumnComboBox ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} ref={editorRef} valid={valid} id={id} disabled={disabled} columns={columns} textField={'name'} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormMultiSelect = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    wrapperStyle,\n    ...others\n  } = fieldRenderProps;\n  const editorRef = React.useRef(null);\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : \"\";\n  const errorId = showValidationMessage ? `${id}_error` : \"\";\n  const labelId = label ? `${id}_label` : \"\";\n  return <FieldWrapper style={wrapperStyle}>\n        <Label id={labelId} editorRef={editorRef} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <MultiSelect ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} ref={editorRef} valid={valid} id={id} disabled={disabled} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormDropDownTree = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    wrapperStyle,\n    data,\n    ...others\n  } = fieldRenderProps;\n  const {\n    value,\n    selectField,\n    expandField,\n    dataItemKey,\n    filter\n  } = others;\n  const [expanded, setExpanded] = React.useState([data[0][dataItemKey]]);\n  const treeData = React.useMemo(() => processTreeData(data, {\n    expanded,\n    value,\n    filter\n  }, {\n    selectField,\n    expandField,\n    dataItemKey,\n    subItemsField: 'items'\n  }), [data, expanded, value, filter, selectField, expandField, dataItemKey]);\n  const onExpandChange = React.useCallback(event => setExpanded(expandedState(event.item, dataItemKey, expanded)), [expanded, dataItemKey]);\n  const editorRef = React.useRef(null);\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : \"\";\n  const errorId = showValidationMessage ? `${id}_error` : \"\";\n  const labelId = label ? `${id}_label` : \"\";\n  return <FieldWrapper style={wrapperStyle}>\n        <Label id={labelId} editorRef={editorRef} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <DropDownTree ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} ref={editorRef} valid={valid} id={id} disabled={disabled} data={treeData} onExpandChange={onExpandChange} dataItemKey={others.dataItemKey} textField={others.textField} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormDatePicker = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    wrapperStyle,\n    hintDirection,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  return <FieldWrapper style={wrapperStyle}>\n        <Label id={labelId} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <div className={'k-form-field-wrap'}>\n          <DatePicker ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} valid={valid} id={id} disabled={disabled} {...others} />\n          {showHint && <Hint id={hintId} direction={hintDirection}>{hint}</Hint>}\n          {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n        </div>\n      </FieldWrapper>;\n};\nexport const FormDateTimePicker = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    wrapperStyle,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  return <FieldWrapper style={wrapperStyle}>\n        <Label id={labelId} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <DateTimePicker ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} valid={valid} id={id} disabled={disabled} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormTimePicker = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    wrapperStyle,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  return <FieldWrapper style={wrapperStyle}>\n        <Label id={labelId} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <TimePicker ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} valid={valid} id={id} disabled={disabled} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormDateInput = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    wrapperStyle,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  return <FieldWrapper style={wrapperStyle}>\n        <Label id={labelId} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <DateInput ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} valid={valid} id={id} disabled={disabled} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormDateRangePicker = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    wrapperStyle,\n    ...others\n  } = fieldRenderProps;\n  const editorRef = React.useRef(null);\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  const labelId = label ? `${id}_label` : '';\n  return <FieldWrapper style={wrapperStyle}>\n        <Label id={labelId} editorRef={editorRef} editorId={id} editorValid={valid} editorDisabled={disabled}>\n          {label}\n        </Label>\n        <DateRangePicker ariaLabelledBy={labelId} ariaDescribedBy={`${hintId} ${errorId}`} ref={editorRef} valid={valid} id={id} disabled={disabled} {...others} />\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};\nexport const FormFloatingNumericTextBox = fieldRenderProps => {\n  const {\n    validationMessage,\n    touched,\n    label,\n    id,\n    valid,\n    disabled,\n    hint,\n    optional,\n    value,\n    ...others\n  } = fieldRenderProps;\n  const showValidationMessage = touched && validationMessage;\n  const showHint = !showValidationMessage && hint;\n  const hintId = showHint ? `${id}_hint` : '';\n  const errorId = showValidationMessage ? `${id}_error` : '';\n  return <FieldWrapper>\n        <FloatingLabel optional={optional} editorValue={value} editorId={id} editorValid={valid} editorDisabled={disabled} label={label}>\n          <NumericTextBox ariaDescribedBy={`${hintId} ${errorId}`} value={value} valid={valid} id={id} disabled={disabled} {...others} />\n        </FloatingLabel>\n        {showHint && <Hint id={hintId}>{hint}</Hint>}\n        {showValidationMessage && <Error id={errorId}>{validationMessage}</Error>}\n      </FieldWrapper>;\n};","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Form, FormElement } from '@progress/kendo-react-form';\nimport { Button } from '@progress/kendo-react-buttons';\nimport { Stepper } from '@progress/kendo-react-layout';\nimport { PetInfo } from './PetInfo';\nimport { MedHistory } from './MedHistory';\nimport { Diet } from './Diet';\nimport InteractiveChart from './InteractiveChart';\nconst stepPages = [PetInfo, MedHistory, Diet];\n\nconst MultiStepForm = () => {\n  const [step, setStep] = React.useState(0);\n  const [formState, setFormState] = React.useState({});\n  const [steps, setSteps] = React.useState([{\n    label: 'Pet Info',\n    isValid: undefined\n  }, {\n    label: 'Medical History',\n    isValid: undefined\n  }, {\n    label: 'Diet',\n    isValid: undefined\n  }]);\n  const lastStepIndex = steps.length - 1;\n  const isLastStep = lastStepIndex === step;\n  const isPreviousStepsValid = steps.slice(0, step).findIndex(currentStep => currentStep.isValid === false) === -1;\n  const onStepSubmit = React.useCallback(event => {\n    const {\n      isValid,\n      values\n    } = event;\n    const currentSteps = steps.map((currentStep, index) => ({\n      ...currentStep,\n      isValid: index === step ? isValid : currentStep.isValid\n    }));\n    setSteps(currentSteps);\n    setStep(() => Math.min(step + 1, lastStepIndex));\n    if (isLastStep && isPreviousStepsValid && isValid) {\n\n        setFormState( (formState) => { return {...formState, ...values} } );\n    }\n  }, [steps, isLastStep, isPreviousStepsValid, step, lastStepIndex]);\n  const onPrevClick = React.useCallback(event => {\n    event.preventDefault();\n    setStep(() => Math.max(step - 1, 0));\n  }, [step, setStep]);\n  return <div style={{\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center'\n  }}>\n    <Stepper value={step} items={steps} />\n    <Form initialValues={formState} onSubmitClick={onStepSubmit} render={formRenderProps => <div style={{\n      alignSelf: 'center'\n    }}>\n      <FormElement style={{ width: 480 }}>\n        {stepPages[step]}\n        <span style={{ marginTop: '40px' }} className={'k-form-separator'} />\n        <div style={{ justifyContent: 'space-between', alignContent: 'center' }}\n          className={'k-form-buttons k-button k-button-md k-rounded-md k-button-solid k-button-solid-bases-end'}>\n          <span style={{ alignSelf: 'center' }}>Step {step + 1} of 3</span>\n          <div> {step !== 0 ? <Button style={{ marginRight: '16px' }} onClick={onPrevClick}>\n            Previous\n          </Button> : undefined}\n            <Button themeColor={'primary'} disabled={isLastStep ? !isPreviousStepsValid : false} onClick={formRenderProps.onSubmit}>\n              {isLastStep ? 'Submit' : 'Next'}\n            </Button>\n          </div>\n        </div>\n      </FormElement>\n      <InteractiveChart\n        diet={{\n          protein: { types: [\"chicken\", \"beef\", \"fish\"], quantity: [1, 2, 3] },\n          carbs: { types: [\"rice\", \"potatoes\", \"pasta\"], quantity: [1, 2, 3] },\n          fat: { types: [\"butter\", \"oil\", \"avocado\"], quantity: [1, 2, 3] }\n        }}\n        form_data={formState}\n        isLastStep={isLastStep}\n      />\n    </div>} />\n  </div>;\n};\n\nexport default MultiStepForm;","import { getter } from '@progress/kendo-react-common';\nconst emailRegex = new RegExp(/\\S+@\\S+\\.\\S+/);\nconst phoneRegex = new RegExp(/^[0-9 ()+-]+$/);\nconst ccardRegex = new RegExp(/^[0-9-]+$/);\nconst cvcRegex = new RegExp(/^[0-9]+$/);\nexport const termsValidator = value => value ? \"\" : \"It's required to agree with Terms and Conditions.\";\nexport const emailValidator = value => !value ? \"Email field is required.\" : emailRegex.test(value) ? \"\" : \"Email is not in a valid format.\";\nexport const nameValidator = value => !value ? \"Full Name is required\" : value.length < 7 ? \"Full Name should be at least 7 characters long.\" : \"\";\nexport const userNameValidator = value => !value ? \"User Name is required\" : value.length < 5 ? \"User name should be at least 5 characters long.\" : \"\";\nexport const phoneValidator = value => !value ? \"Phone number is required.\" : phoneRegex.test(value) ? \"\" : \"Not a valid phone number.\";\nexport const cardValidator = value => !value ? \"Credit card number is required. \" : ccardRegex.test(value) ? \"\" : \"Not a valid credit card number format.\";\nexport const cvcValidator = value => !value ? \"CVC code is required,\" : cvcRegex.test(value) || value.length !== 3 ? \"\" : \"Not a valid CVC code format.\";\nexport const guestsValidator = value => !value ? \"Number of guests is required\" : value < 5 ? \"\" : \"Maximum 5 guests\";\nexport const nightsValidator = value => value ? \"\" : \"Number of Nights is required.\";\nexport const arrivalDateValidator = value => value ? \"\" : \"Arrival Date is required.\";\nexport const colorValidator = value => value ? \"\" : \"Color is required.\";\nexport const requiredValidator = value => value ? \"\" : \"Error: This field is required.\";\nexport const passwordValidator = value => value && value.length > 8 ? '' : 'Password must be at least 8 symbols.';\nexport const addressValidator = value => value ? \"\" : \"Address is required.\";\nexport const petNameValidator = value => value ? \"\" : \"Pet Name is required.\";\nexport const petAgeValidator = value => value !== 0 && !value ? \"Pet Age is required.\" : value < 0 ? \"Pet Age should be a positive number.\" : \"\";\nexport const petBreedValidator = value => value ? \"\" : \"Pet Breed is required.\";\nexport const petWeightValidator = value => value !== 0 && !value ? \"Pet Weight is required.\" : value <= 0 ? \"Pet Weight should be greater than 0\" : \"\";\nconst userNameGetter = getter('username');\nconst emailGetter = getter('email');\nexport const formValidator = values => {\n  const userName = userNameGetter(values);\n  const emailValue = emailGetter(values);\n  if (userName && emailValue && emailRegex.test(emailValue)) {\n    return {};\n  }\n  return {\n    VALIDATION_SUMMARY: 'Please fill in the following fields.',\n    ['username']: !userName ? 'User Name is required.' : '',\n    ['email']: emailValue && emailRegex.test(emailValue) ? '' : 'Email is required and should be in a valid format.'\n  };\n};","import * as React from 'react';\nimport { Field } from '@progress/kendo-react-form';\nimport { FormInput, FormNumericTextBox, FormAutoComplete } from './form-components';\nimport { petNameValidator, petAgeValidator, petBreedValidator, petWeightValidator } from './validators';\nimport { dog_breeds } from './Data';\n\nexport const PetInfo = <div>\n    <Field key={'petName'} id={'petName'} name={'petName'} label={'Pet Name'} component={FormInput} validator={petNameValidator} />\n    <Field key={'petAge'} id={'petAge'} name={'petAge'} label={'Pet Age'} component={FormNumericTextBox} validator={petAgeValidator}  />\n    <Field key={'petBreed'} id={'petBreed'} name={'petBreed'} label={'Pet Breed'} component={FormAutoComplete} data={dog_breeds} validator={petBreedValidator} />\n    <Field key={'petWeight'} id={'petWeight'} name={'petWeight'} label={'Pet Weight (lbs)'} component={FormNumericTextBox} validator={petWeightValidator}  />\n  </div>;","export const dog_breeds = ['Affenpinscher', 'Afghan Hound', 'Airedale Terrier', 'Akita', 'Alaskan Malamute', 'American Bulldog', 'American English Coonhound', 'American Eskimo Dog', 'American Foxhound', 'American Hairless Terrier', 'American Leopard Hound', 'American Staffordshire Terrier', 'American Water Spaniel', 'Anatolian Shepherd Dog', 'Appenzeller Sennenhund', 'Australian Cattle Dog', 'Australian Kelpie', 'Australian Shepherd', 'Australian Stumpy Tail Cattle Dog', 'Australian Terrier', 'Azawakh', 'Barbet', 'Basenji', 'Basset Fauve de Bretagne', 'Basset Hound', 'Bavarian Mountain Scent Hound', 'Beagle', 'Bearded Collie', 'Beauceron', 'Bedlington Terrier', 'Belgian Laekenois', 'Belgian Malinois', 'Belgian Sheepdog', 'Belgian Tervuren', 'Bergamasco Sheepdog', 'Berger Picard', 'Bernese Mountain Dog', 'Bichon Frise', 'Biewer Terrier', 'Black and Tan Coonhound', 'Black Russian Terrier', 'Bloodhound', 'Bluetick Coonhound', 'Boerboel', 'Bohemian Shepherd', 'Bolognese', 'Border Collie', 'Border Terrier', 'Borzoi', 'Boston Terrier', 'Bouvier des Flandres', 'Boxer', 'Boykin Spaniel', 'Bracco Italiano', 'Braque du Bourbonnais', 'Braque Francais Pyrenean', 'Briard', 'Brittany', 'Broholmer', 'Brussels Griffon', 'Bull Terrier', 'Bulldog', 'Bullmastiff', 'Cairn Terrier', 'Canaan Dog', 'Cane Corso', 'Cardigan Welsh Corgi', 'Carolina Dog', 'Catahoula Leopard Dog', 'Caucasian Shepherd Dog', 'Cavalier King Charles Spaniel', 'Central Asian Shepherd Dog', 'Cesky Terrier', 'Chesapeake Bay Retriever', 'Chihuahua', 'Chinese Crested', 'Chinese Shar-Pei', 'Chinook', 'Chow Chow', 'Cirneco dell’Etna', 'Clumber Spaniel', 'Cocker Spaniel', 'Collie', 'Coton de Tulear', 'Croatian Sheepdog', 'Curly-Coated Retriever', 'Czechoslovakian Vlcak', 'Dachshund', 'Dalmatian', 'Dandie Dinmont Terrier', 'Danish-Swedish Farmdog', 'Deutscher Wachtelhund', 'Doberman Pinscher', 'Dogo Argentino', 'Dogue de Bordeaux', 'Drentsche Patrijshond', 'Drever', 'Dutch Shepherd', 'English Cocker Spaniel', 'English Foxhound', 'English Setter', 'English Springer Spaniel', 'English Toy Spaniel', 'Entlebucher Mountain Dog', 'Estrela Mountain Dog', 'Eurasier', 'Field Spaniel', 'Finnish Lapphund', 'Finnish Spitz', 'Flat-Coated Retriever', 'French Bulldog', 'French Spaniel', 'German Longhaired Pointer', 'German Pinscher', 'German Shepherd Dog', 'German Shorthaired Pointer', 'German Spitz', 'German Wirehaired Pointer', 'Giant Schnauzer', 'Glen of Imaal Terrier', 'Golden Retriever', 'Gordon Setter', 'Grand Basset Griffon Vendéen', 'Great Dane', 'Great Pyrenees', 'Greater Swiss Mountain Dog', 'Greyhound', 'Hamiltonstovare', 'Hanoverian Scenthound', 'Harrier', 'Havanese', 'Hokkaido', 'Hovawart', 'Ibizan Hound', 'Icelandic Sheepdog', 'Irish Red and White Setter', 'Irish Setter', 'Irish Terrier', 'Irish Water Spaniel', 'Irish Wolfhound', 'Italian Greyhound', 'Jagdterrier', 'Japanese Chin', 'Japanese Spitz', 'Jindo', 'Kai Ken', 'Karelian Bear Dog', 'Keeshond', 'Kerry Blue Terrier', 'Kishu Ken', 'Komondor', 'Kromfohrlander', 'Kuvasz', 'Labrador Retriever', 'Lagotto Romagnolo', 'Lakeland Terrier', 'Lancashire Heeler', 'Lapponian Herder', 'Leonberger', 'Lhasa Apso', 'Löwchen', 'Maltese', 'Manchester Terrier (Standard)', 'Manchester Terrier (Toy)', 'Mastiff', 'Miniature American Shepherd', 'Miniature Bull Terrier', 'Miniature Pinscher', 'Miniature Schnauzer', 'Mountain Cur', 'Mudi', 'Neapolitan Mastiff', 'Nederlandse Kooikerhondje', 'Newfoundland', 'Norfolk Terrier', 'Norrbottenspets', 'Norwegian Buhund', 'Norwegian Elkhound', 'Norwegian Lundehund', 'Norwich Terrier', 'Nova Scotia Duck Tolling Retriever', 'Old English Sheepdog', 'Otterhound', 'Papillon', 'Parson Russell Terrier', 'Pekingese', 'Pembroke Welsh Corgi', 'Perro de Presa Canario', 'Peruvian Inca Orchid', 'Petit Basset Griffon Vendéen', 'Pharaoh Hound', 'Plott Hound', 'Pointer', 'Polish Lowland Sheepdog', 'Pomeranian', 'Poodle (Miniature)', 'Poodle (Standard)', 'Poodle (Toy)', 'Porcelaine', 'Portuguese Podengo', 'Portuguese Podengo Pequeno', 'Portuguese Pointer', 'Portuguese Sheepdog', 'Portuguese Water Dog', 'Pudelpointer', 'Pug', 'Puli', 'Pumi', 'Pyrenean Mastiff', 'Pyrenean Shepherd', 'Rafeiro do Alentejo', 'Rat Terrier', 'Redbone Coonhound', 'Rhodesian Ridgeback', 'Romanian Mioritic Shepherd Dog', 'Rottweiler', 'Russell Terrier', 'Russian Toy', 'Russian Tsvetnaya Bolonka', 'Saint Bernard', 'Saluki', 'Samoyed', 'Schapendoes', 'Schipperke', 'Scottish Deerhound', 'Scottish Terrier', 'Sealyham Terrier', 'Segugio Italiano', 'Shetland Sheepdog', 'Shiba Inu', 'Shih Tzu', 'Shikoku', 'Siberian Husky', 'Silky Terrier', 'Skye Terrier', 'Sloughi', 'Slovakian Wirehaired Pointer', 'Slovensky Cuvac', 'Slovensky Kopov', 'Small Munsterlander Pointer', 'Smooth Fox Terrier', 'Soft Coated Wheaten Terrier', 'Spanish Mastiff', 'Spanish Water Dog', 'Spinone Italiano', 'Stabyhoun', 'Staffordshire Bull Terrier', 'Standard Schnauzer', 'Sussex Spaniel', 'Swedish Lapphund', 'Swedish Vallhund', 'Taiwan Dog', 'Teddy Roosevelt Terrier', 'Thai Ridgeback', 'Tibetan Mastiff', 'Tibetan Spaniel', 'Tibetan Terrier', 'Tornjak', 'Tosa', 'Toy Fox Terrier', 'Transylvanian Hound', 'Treeing Tennessee Brindle', 'Treeing Walker Coonhound', 'Vizsla', 'Weimaraner', 'Welsh Springer Spaniel', 'Welsh Terrier', 'West Highland White Terrier', 'Wetterhoun', 'Whippet', 'Wire Fox Terrier', 'Wirehaired Pointing Griffon', 'Wirehaired Vizsla', 'Working Kelpie', 'Xoloitzcuintli', 'Yakutian Laika', 'Yorkshire Terrier']\n\nexport const exerciseActivity = \n[{label: '1', value: 1}, {label: '2', value: 2}, {label: '3', value: 3}, {label: '4', value: 4}, {label: '5', value: 5} ];\n\nexport const feedingStyle = [ \n    {label: 'Home Cooked', value: 'Home Cooked'},\n    {label: 'Kibbles', value: 'Kibbles'},\n    {label: 'Home Cooked and Kibbles', value: 'Home Cooked and Kibbles'}\n];\n","import * as React from 'react';\nimport { Field } from '@progress/kendo-react-form';\nimport { FormTextArea } from './form-components';\n\nexport const MedHistory = <div>\n    <Field key={'chronic diseases'} id={'chronic diseases'} name={'chronic diseases'} label={'Chronic diseases'} optional={true} component={FormTextArea} />\n    <Field key={'allergies'} id={'allergies'} name={'allergies'} label={'Allergies'} optional={true} component={FormTextArea} />\n  </div>;","import * as React from 'react';\nimport { Field } from '@progress/kendo-react-form';\nimport { FormRadioGroup, FormTextArea} from './form-components';\nimport { exerciseActivity, feedingStyle } from './Data';\n\n\nexport const Diet = <div>\n\n    <Field key={'exercise'} id={'exercise'} name={'exercise'} label={'Exercise'} hint={'1 being the least and 5 being the most'} component={FormRadioGroup} \n     layout={'horizontal'} data={exerciseActivity} />\n\n    <Field key={'feeding Style'} id={'feeding Style'} name={'feeding Style'} label={'Feeding Style'} component={FormRadioGroup}  \n    layout={'horizontal'} data={feedingStyle} />\n\n    <Field key={'carbohydrates'} id={'carbohydrates'} name={'carbohydrates'} label={'Carbohydrates'} component={FormTextArea}\n    hint={'Specify <food>, <amount in grams> per line for every food'} optional={true}  />\n    <Field key={'fats'} id={'fats'} name={'fats'} label={'Fats'} component={FormTextArea} \n    hint={'Specify <food>, <amount in grams> per line for every food'} optional={true} />\n    <Field key={'proteins'} id={'proteins'} name={'proteins'} label={'Proteins'} component={FormTextArea} \n    hint={'Specify <food>, <amount in grams> per line for every food'} optional={true} />\n\n\n  </div>;\n\n  \n","import React from 'react';\nimport logo from './logo.svg';\nimport InteractiveChart from './InteractiveChart.js';\nimport { dog_breeds } from './Data';\nimport MultiStepForm from './Form.js';\n\nfunction Home() {\n  return (\n    <div className=\"App\">\n      <h1 id=\"title\"> Bone Appétit 🦴 </h1>\n      <br />\n      <br />\n\n      <MultiStepForm />\n\n    </div>\n  );\n}\n\nexport default Home;","import logo from './logo.svg';\nimport './App.css';\nimport Home from './Home';\nimport Data from './Data';\nimport { Routes, Route } from \"react-router-dom\";\nimport React from 'react';\n\nfunction App() {\n  return (\n    <>\n      <Routes>\n        <Route path=\"/\" element={<Home />} />\n      </Routes>\n    </>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter as Router } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n  <Router>\n      <App />\n  </Router>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}