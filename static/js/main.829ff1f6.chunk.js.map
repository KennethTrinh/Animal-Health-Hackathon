{"version":3,"sources":["InteractiveChart.js","Home.js","App.js","reportWebVitals.js","index.js","logo.svg"],"names":["InteractiveChart","props","_useState","useState","diet","protein","quantity","reduce","a","b","_useState2","Object","slicedToArray","_useState3","carbs","_useState4","_useState5","fat","_useState6","_useState7","types","_useState8","proteinTypes","_useState9","_useState10","proteinQuantity","_useState11","_useState12","carbsTypes","_useState13","_useState14","carbsQuantity","_useState15","_useState16","fatTypes","_useState17","_useState18","fatQuantity","generateList","macronutrient","concat","map","item","index","join","_useState19","role","type","p","html","_useState20","data","useEffect","console","log","react_default","createElement","dist","chartType","options","title","is3D","tooltip","isHtml","trigger","width","height","Home","className","src_InteractiveChart","App","Fragment","react_router_dist","path","element","src_Home","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","react_router_dom_dist","src_App","module","exports"],"mappings":"6LA4EeA,SArEU,SAACC,GAAU,IAAAC,EAEFC,mBAASF,EAAMG,KAAKC,QAAQC,SAASC,OAAO,SAACC,EAAGC,GAAC,OAAKD,EAAIC,KAAIC,EAAAC,OAAAC,EAAA,EAAAD,CAAAT,EAAA,GAArFG,EAAOK,EAAA,GAAgFG,GAApEH,EAAA,GACAP,mBAASF,EAAMG,KAAKU,MAAMR,SAASC,OAAO,SAACC,EAAGC,GAAC,OAAKD,EAAIC,MAAIM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAE,EAAA,GAA/EC,EAAKC,EAAA,GAAUC,GAAAD,EAAA,GACAZ,mBAASF,EAAMG,KAAKa,IAAIX,SAASC,OAAO,SAACC,EAAGC,GAAC,OAAKD,EAAIC,MAAIS,EAAAP,OAAAC,EAAA,EAAAD,CAAAK,EAAA,GAAzEC,EAAGC,EAAA,GAAQC,GAAAD,EAAA,GAEsBf,mBAASF,EAAMG,KAAKC,QAAQe,QAAMC,EAAAV,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAAnEG,EAAYD,EAAA,GAAyDE,GAAxCF,EAAA,GACUlB,mBAASF,EAAMG,KAAKC,QAAQC,WAASkB,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAA5EE,EAAeD,EAAA,GAA+DE,GAA3CF,EAAA,GACNrB,mBAASF,EAAMG,KAAKU,MAAMM,QAAMO,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAA7DE,EAAUD,EAAA,GAAeE,GAAAF,EAAA,GACUxB,mBAASF,EAAMG,KAAKU,MAAMR,WAASwB,EAAAnB,OAAAC,EAAA,EAAAD,CAAAkB,EAAA,GAAtEE,EAAaD,EAAA,GAAkBE,GAAAF,EAAA,GACN3B,mBAASF,EAAMG,KAAKa,IAAIG,QAAMa,EAAAtB,OAAAC,EAAA,EAAAD,CAAAqB,EAAA,GAAvDE,EAAQD,EAAA,GAAaE,GAAAF,EAAA,GACU9B,mBAASF,EAAMG,KAAKa,IAAIX,WAAS8B,EAAAzB,OAAAC,EAAA,EAAAD,CAAAwB,EAAA,GAAhEE,EAAWD,EAAA,GAEZE,GAF4BF,EAAA,GAEb,SAACG,EAAejC,GACjC,uCAAAkC,OAEMD,EAAcE,IAAI,SAACC,EAAMC,GACzB,mDAAAH,OAEME,EAAI,gCAAAF,OACElC,EAASqC,GAAM,oDAG1BC,KAAK,IAAG,iCAGfC,EACmB1C,mBAAS,CAC5B,CAAC,OAAQ,gBAAiB,CAAE2C,KAAM,UAAWC,KAAM,SAAUC,EAAG,CAAEC,MAAM,KAExE,CAAC,UAAW5C,EAAO,uBAAAmC,OAAyBnC,EAAO,oBAAAmC,OAAmBF,EAAahB,EAAcG,KACjG,CAAC,gBAAiBX,EAAK,4BAAA0B,OAA8B1B,EAAK,oBAAA0B,OAAmBF,EAAaV,EAAYG,KACtG,CAAC,MAAOd,EAAG,mBAAAuB,OAAqBvB,EAAG,oBAAAuB,OAAmBF,EAAaJ,EAAUG,OAC/Ea,EAAAvC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,GANIM,EAAID,EAAA,GAASA,EAAA,GAQnBE,oBAAU,WACNC,QAAQC,IAAI,OAEb,CAACjD,EAASS,EAAOG,EAAKK,EAAcG,EAAiBG,EAAYG,EAAeG,EAAUG,IAoB7F,OACIkB,EAAA/C,EAAAgD,cAACC,EAAA,EAAK,CACJC,UAAU,WACVP,KAAMA,EACNQ,QAbU,CACZC,MAAO,oBACPC,MAAM,EACNC,QAAS,CACLC,QAAQ,EACRC,QAAS,cASXC,MAAO,OACPC,OAAQ,YCjDHC,MAhBf,WACI,OACEZ,EAAA/C,EAAAgD,cAAA,OAAKY,UAAU,OACbb,EAAA/C,EAAAgD,cAAA,UAAK,4BACLD,EAAA/C,EAAAgD,cAACa,EACC,CACAjE,KAAM,CACJC,QAAS,CAACe,MAAO,CAAC,UAAW,OAAQ,QAASd,SAAW,CAAC,EAAG,EAAG,IAChEQ,MAAO,CAACM,MAAO,CAAC,OAAQ,WAAY,SAAUd,SAAW,CAAC,EAAG,EAAG,IAChEW,IAAK,CAACG,MAAO,CAAC,SAAU,MAAO,WAAYd,SAAW,CAAC,EAAG,EAAG,gBCE1DgE,MAXf,WACE,OACEf,EAAA/C,EAAAgD,cAAAD,EAAA/C,EAAA+D,SAAA,KACIhB,EAAA/C,EAAAgD,cAACgB,EAAA,EAAM,KACPjB,EAAA/C,EAAAgD,cAACgB,EAAA,EAAK,CAACC,KAAK,IAAIC,QAASnB,EAAA/C,EAAAgD,cAACmB,EAAI,WCEvBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,cCADY,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAIHtC,EAAA/C,EAAAgD,cAACsC,EAAA,EAAM,KACHvC,EAAA/C,EAAAgD,cAACuC,EAAG,QAOVnB,wBCpBAoB,EAAAC,QAAiBlB,EAAA/B,EAAuB","file":"static/js/main.829ff1f6.chunk.js","sourcesContent":["import React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { findAllByTestId } from \"@testing-library/react\";\n\n\n\nconst InteractiveChart = (props) => {\n    \n    const [protein, setProtien] = useState(props.diet.protein.quantity.reduce((a, b) => a + b )); //11\n    const [carbs, setCarbs] = useState(props.diet.carbs.quantity.reduce((a, b) => a + b ));\n    const [fat, setFat] = useState(props.diet.fat.quantity.reduce((a, b) => a + b ));\n\n    const [proteinTypes, setProtienTypes] = useState(props.diet.protein.types); //[\"chicken\", \"beef\", \"fish\"]\n    const [proteinQuantity, setProtienQuantity] = useState(props.diet.protein.quantity); // [1, 2, 3]\n    const [carbsTypes, setCarbsTypes] = useState(props.diet.carbs.types);\n    const [carbsQuantity, setCarbsQuantity] = useState(props.diet.carbs.quantity);\n    const [fatTypes, setFatTypes] = useState(props.diet.fat.types);\n    const [fatQuantity, setFatQuantity] = useState(props.diet.fat.quantity);\n    \n    const generateList = (macronutrient, quantity) => {\n        return `\n          <ul>\n            ${macronutrient.map((item, index) => { // <button class=\"decrement\" onclick=\"() => {console.log('hi')}\">-</button>\n              return `\n                <li>\n                  ${item}: \n                  <span>${quantity[index]}</span>\n                </li>\n              `;\n            }).join('')}\n          </ul>\n        `;\n      };\n    const[data, setData] = useState([\n        [\"Task\", \"Hours per Day\", { role: \"tooltip\", type: \"string\", p: { html: true } }],\n\n        [\"Protein\", protein, `<h1> Protein: <span>${protein} g <span> </h1> ${generateList(proteinTypes, proteinQuantity) }`],\n        [\"Carbohydrates\", carbs, `<h1> Carboydrates: <span>${carbs} g <span> </h1> ${generateList(carbsTypes, carbsQuantity) }`],\n        [\"Fat\", fat, `<h1> Fat: <span>${fat} g <span> </h1> ${generateList(fatTypes, fatQuantity) }`],\n    ]);\n\n    useEffect(() => {\n        console.log('hi');\n\n    }, [protein, carbs, fat, proteinTypes, proteinQuantity, carbsTypes, carbsQuantity, fatTypes, fatQuantity]);\n\n\n    // let data = [\n    //     [\"Task\", \"Hours per Day\", { role: \"tooltip\", type: \"string\", p: { html: true } }],\n\n    //     [\"Protein\", 11, `<h1> Protein: <span>${props.nutrition.protein} g <span> </h1> ${generateList(props.diet.protein.types, props.diet.protein.quantity) }`],\n    //     [\"Carbohydrates\", 2, `<h1> Carboydrates: <span>${props.nutrition.protein} g <span> </h1>`],\n    //     [\"Fat\", 2, `<h1> Fat: <span>${props.nutrition.protein} g <span> </h1>`],\n    // ];\n      \n    const options = {\n        title: \"Dietary Breakdown\",\n        is3D: true,\n        tooltip: {\n            isHtml: true, \n            trigger: \"selection\" // 'focus' | 'none' | 'selection'\n        }\n    };\n\n    return (\n        <Chart\n          chartType=\"PieChart\"\n          data={data}\n          options={options}\n          width={\"100%\"}\n          height={\"400px\"}\n        />\n      );\n}\n\nexport default InteractiveChart;\n","import React from 'react';\nimport logo from './logo.svg';\nimport InteractiveChart from './InteractiveChart.js';\n\n\n\nfunction Home() {\n    return (\n      <div className=\"App\">\n        <h1 > Bone Appétit ♥ </h1>\n        <InteractiveChart \n          // nutrition={ {protein: 11, carbs: 2, fat: 2} } \n          diet={{\n            protein: {types: [\"chicken\", \"beef\", \"fish\"], quantity:  [1, 2, 3]},\n            carbs: {types: [\"rice\", \"potatoes\", \"pasta\"], quantity:  [1, 2, 3]},\n            fat: {types: [\"butter\", \"oil\", \"avocado\"], quantity:  [1, 2, 3]}\n          }}\n        />\n      </div>\n    );\n  }\n\nexport default Home;","import logo from './logo.svg';\nimport './App.css';\nimport Home from './Home';\nimport { Routes, Route} from \"react-router-dom\";\nimport React from 'react';\n\nfunction App() {\n  return (\n    <>\n        <Routes>\n        <Route path=\"/\" element={<Home />} />\n        </Routes>\n    </>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter as Router } from \"react-router-dom\";\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>\n  <Router>\n      <App />\n  </Router>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";"],"sourceRoot":""}